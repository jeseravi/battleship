import {generateElement} from "./generateElement";
import { boardMaker, opponentBoard } from "./boardMaker";
import {gameMechanics} from "./index";

//array to check for duplicates
let coordinateArray = [];
let userCoordinateArray = [];

//also need a way to indicate how large the ship is? Maybe a hover effect that lights up the buttons?
 //need to make sure the only thing they can do at this point
 //is to click on the board and place their ship
 export function placeOnBoard(nameOfShip,nameOfBoard,location){

    //enable the board buttons if no location is specified
    //there should only be a location if it's the CPU's turn to place ships
    //this will disable the user from being able to place ships on the CPU's board
    if(location==undefined){
        Array.from(document.getElementsByClassName(`boardButton unselectedBoardButton ${nameOfBoard}`)).forEach(item => {
        item.disabled=false;
        })
    }

    //string containing the ship name, so we can reference it in a class later
    var shipNameString = nameOfShip;

    //make the call "nameOfShip" reference the objectd 
    nameOfShip = eval(nameOfShip);
    
    //change the sidebar ship buttons such that they cannot be clicked
    //they should also visually change to suggest they cannot be clicked
    Array.from(document.getElementsByClassName("unselectedShip")).forEach(item => {
        item.disabled=true;
    })
    
    //if a spot on the board is clicked, change the button to the ship class
    //need some way of removing the event listeners generated by this code
    Array.from(document.getElementsByClassName(`boardButton unselectedBoardButton ${nameOfBoard}`)).forEach(item => {
        item.addEventListener('click', event =>{
            
            //when clicked, it should change to the ship's class
            //this should change its color, along with colors along the same column
            //depending on the ship length 
            
            
            //need to loop until the Y coordinate has gone far enough
            for(let i=0;i<nameOfShip.length;i++){


                //split the XY coordinate into an array.
                var startingID = item.getAttribute('id'); 
                var splitString = startingID.split(',');
                let startingCoordinate = parseInt(splitString[1])
                let yCoordinate = startingCoordinate;
                let xCoordinate = parseInt(splitString[0])

                //make sure the function doesn't allow you to place ship too low
                if(i==0 && (startingCoordinate + nameOfShip.length)>11){
                    alert("You must place this ship higher on the board");
                    break;
                } 
                
                  //check if the ship placement will cause an overlap
                  //if it does, force user to pick another location
                  else if(userCoordinateArray.includes(xCoordinate+","+eval(yCoordinate+i))){
                    alert("This will cause your ships to overlap. Please choose another spot.")
                    //the loop will still add the coordinates to the array. must remove it
                    //or else the function will still think that coordinate is off limits
                    userCoordinateArray.pop();

                    Array.from(document.getElementsByClassName(`boardButton ${shipNameString}`)).forEach(item => {
                        item.disabled=false;
                        item.setAttribute("class",`boardButton unselectedBoardButton ${nameOfBoard}`)
                        
                    })

                    break;

                } else {
                    
                    var modifiedArray = startingCoordinate+i;
                    var testString = splitString[0]+","+modifiedArray;
                    userCoordinateArray.push(testString);
                    
                    document.getElementById(testString).setAttribute("class",`${shipNameString} boardButton ${nameOfBoard}`);
                    document.getElementById(testString).disabled=true;
                    //when the ship is placed, it should grey out the sidebar ship
                    //and make the remaining ships selectable
                    if(i==nameOfShip.length-1){

                        //change the sidebar ship buttons such that they can be clicked
                        Array.from(document.getElementsByClassName("unselectedShip")).forEach(item => {
                            item.disabled=false;
                        })
                        Array.from(document.getElementsByClassName("selectedShip")).forEach(item => {
                            item.disabled=true;
                        })

                        //remove the event listeners from all the unselected board buttons
                        Array.from(document.getElementsByClassName(`boardButton unselectedBoardButton ${nameOfBoard}`)).forEach(item => {
                            
                            const initialID = item.getAttribute('id');
                            var old_element = document.getElementById(initialID);
                            var new_element = old_element.cloneNode(true);
                            old_element.parentNode.replaceChild(new_element,old_element);
                            
                        })

                        //create opponent's board if all player ships have been placed
                        //only if the opponent's board hasn't already been created
                        if(Array.from(document.getElementsByClassName(`boardButton unselectedBoardButton computerBoard`)).length==0){
                            opponentBoard();

                        }
                        
                        

                    }
                    
                    
                }            
                    
            }
            


            
            
            

            
            

        })




    })

    
    //this is what to do if a location is specified
    //in other words, this is the computer's board placement
    if(location!=null){
        

        //choose a random coordinate to place a ship
        let xCoordinate = Math.floor(Math.random()*10+1);
        let yCoordinate = Math.floor(Math.random()*(11-eval(nameOfShip).length)+1);

        //check if the ship placement will cause an overlap
        //if it does, choose another coordinate
        for(let i=0;i<(eval(nameOfShip).length);i++){

            if(coordinateArray.includes(xCoordinate+","+eval(yCoordinate+i))){
                console.log("error");
                xCoordinate = Math.floor(Math.random()*10+1);
                yCoordinate = Math.floor(Math.random()*(11-eval(nameOfShip).length)+1);
            }

        }
        

        //need to loop until the Y coordinate has gone far enough
        for(let i=0;i<(eval(nameOfShip).length);i++){


            //split the XY coordinate into an array.
            var startingID = xCoordinate+","+yCoordinate
            var splitString = startingID.split(',');
            let startingCoordinate = parseInt(splitString[1])

            var modifiedArray = startingCoordinate+i;
            var testString = splitString[0]+","+modifiedArray;
            
            //push testString coordinate to coordinateArray to check for duplicates
            coordinateArray.push(testString);
  
            //change the class which in turn changes the color of the board tiles
            document.getElementById(testString).setAttribute("class",`${shipNameString} boardButton ${nameOfBoard}`);
            
            //when all opponent's ships are placed, begin the game
            if(Array.from(document.getElementsByClassName(`unselectedBoardButton computerBoard`)).length==88){

                //remove the event listeners from all the unselected board buttons
                Array.from(document.getElementsByClassName(`boardButton computerBoard`)).forEach(item => {
                                        
                    const initialID = item.getAttribute('id');
                    var old_element = document.getElementById(initialID);
                    var new_element = old_element.cloneNode(true);
                    old_element.parentNode.replaceChild(new_element,old_element);
                    
                })
                
                gameMechanics("tinyShip");
                gameMechanics("mediumShip");
                gameMechanics("largeShip");
            }
        }       
                
    }

        
}